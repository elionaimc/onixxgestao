{"version":3,"sources":["webpack:///./src/app/providers/create/create.component.html","webpack:///./src/app/providers/create/create.component.ts","webpack:///./src/app/providers/detail/detail.component.html","webpack:///./src/app/providers/detail/detail.component.ts","webpack:///./src/app/providers/list/list.component.html","webpack:///./src/app/providers/list/list.component.ts","webpack:///./src/app/providers/providers-routing.module.ts","webpack:///./src/app/providers/providers.module.ts","webpack:///./src/app/services/providers.service.ts"],"names":[],"mappings":"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","file":"providers-providers-module.js","sourcesContent":["module.exports = \"<div class=\\\"panel py-5 px-5\\\">\\n  <form class=\\\"form-auth border rounded border-primary px-2 py-2\\\" #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit(f)\\\" novalidate>\\n    <div class=\\\"row justify-content-center\\\">\\n      <div class=\\\"col-sm-9\\\">\\n        <label for=\\\"authorized\\\">\\n          <h3>Cadastrar Fornecedor</h3>\\n        </label>\\n      </div>\\n    </div>\\n    <div class=\\\"row justify-content-center\\\">\\n      <div class=\\\"col-sm-9\\\">\\n        <label for=\\\"name\\\">Nome</label>\\n        <input type=\\\"text\\\" id=\\\"name\\\" class=\\\"form-control\\\" ngModel #name=\\\"ngModel\\\" \\n         name=\\\"name\\\" placeholder=\\\"Nome\\\" minlength=\\\"5\\\" maxlength=\\\"40\\\" required/>\\n      </div>\\n    </div>\\n    <div class=\\\"row justify-content-center py-1\\\">\\n      <div class=\\\"col-sm-9\\\">\\n        <label for=\\\"cnpj\\\">CNPJ</label>\\n        <input type=\\\"text\\\" id=\\\"cnpj\\\" class=\\\"form-control\\\" ngModel #cnpj=\\\"ngModel\\\"\\n         name=\\\"cnpj\\\" placeholder=\\\"CNPJ\\\" minlength=\\\"10\\\" maxlength=\\\"40\\\" required/>\\n      </div>\\n    </div>\\n    <div class=\\\"row justify-content-center py-3\\\">\\n      <div class=\\\"text-center\\\">\\n        <button type=\\\"submit\\\" [disabled]=\\\"!f.form.valid\\\" class=\\\"btn btn-success btn-lg\\\" id=\\\"cadastrar\\\"\\n          name=\\\"cadastrar\\\">Cadastrar</button>\\n      </div>\\n    </div>\\n  </form>\\n</div>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { NgForm } from '@angular/forms';\nimport { ProvidersService } from 'src/app/services/providers.service';\nimport { Observable, Subject, Subscription } from 'rxjs';\nimport { Provider } from 'src/app/models/provider.model';\n\n@Component({\n  selector: 'app-create',\n  templateUrl: './create.component.html',\n  preserveWhitespaces: true\n})\nexport class CreateComponent implements OnInit{\n\n  splash = true;\n  id: number;\n  provider$: Observable<Provider>;\n  error$ = new Subject<boolean>();\n  control: Subscription;\n  submitted = false;\n\n  constructor(private service: ProvidersService) { }\n\n  ngOnInit() {\n  }\n\n  onSubmit(f: NgForm) {\n    this.submitted = true;\n    if (f.invalid) {\n      return;\n    }\n    console.log(f.form.value.name);\n    this.service.create(f.form.value.name, f.form.value.cnpj)\n      .subscribe();\n  }\n\n}\n","module.exports = \"<div *ngIf=\\\"provider$ | async as response; else loadingError\\\">\\n  <div *ngIf=\\\"response.success; else paramError\\\">\\n    <span>Nome: {{ response.provider.name }}</span>\\n  </div>\\n\\n  <ng-template #paramError>\\n    <app-param-error></app-param-error>\\n  </ng-template>\\n\\n</div>\\n\\n<ng-template #loading>\\n  <app-loading></app-loading>\\n</ng-template>\\n\\n<ng-template #loadingError>\\n  <div *ngIf=\\\"error$ | async; else loading\\\" class=\\\"card mt-3 border-0\\\">\\n    <app-server-error></app-server-error>\\n  </div>\\n</ng-template>\"","import { Component, OnInit, OnDestroy } from '@angular/core';\nimport { Observable, Subject, Subscription, EMPTY } from 'rxjs';\nimport { ActivatedRoute } from '@angular/router';\nimport { catchError } from 'rxjs/operators';\nimport { Provider } from 'src/app/models/provider.model';\nimport { ProvidersService } from 'src/app/services/providers.service';\n\n@Component({\n  selector: 'app-detail',\n  templateUrl: './detail.component.html',\n  preserveWhitespaces: true\n})\nexport class DetailComponent implements OnInit, OnDestroy {\n\n  splash = true;\n  id: number;\n  provider$: Observable<Provider>;\n  error$ = new Subject<boolean>();\n  control: Subscription;\n\n  constructor(private router: ActivatedRoute, private service: ProvidersService) { }\n\n  ngOnInit() {\n    this.control = this.router.params.subscribe(params => {\n      this.id = params['id'];\n      this.provider$ = this.service.listOne(this.id)\n        .pipe(\n          catchError(error => {\n            this.error$.next(true);\n            return EMPTY;\n          })\n        );\n    });\n  }\n\n\n  ngOnDestroy(): void {\n    this.control.unsubscribe();\n  }\n\n}\n","module.exports = \"<div class=\\\"card mt-3 border-0\\\">\\n  <div class=\\\"card-header border-0 bg-white\\\">\\n    <div class=\\\"float-left\\\">\\n      <h4>Fornecedores</h4>\\n    </div>\\n    <div class=\\\"float-right\\\">\\n      <button type=\\\"button\\\" class=\\\"btn btn-success\\\" [routerLink]=\\\"['novo']\\\">Cadastrar</button>\\n\\n      <button type=\\\"button\\\" class=\\\"btn btn-primary\\\" (click)=\\\"onRefresh()\\\">Atualizar</button>\\n    </div>\\n  </div>\\n  <div class=\\\"card-body\\\">\\n    <div class=\\\"panel row\\\" *ngIf=\\\"providers$ | async as response; else loadingError\\\">\\n      <table class=\\\"table table-hover\\\" *ngIf=\\\"response.success; else loading\\\">\\n        <!--<thead>\\n          <tr>\\n            <th>Fornecedor</th>\\n            <th></th>\\n          </tr>\\n        </thead>-->\\n        <tbody>\\n          <tr *ngFor=\\\"let provider of response.providers\\\">\\n            <td class=\\\"border-0\\\"><a [routerLink]=\\\"[ '/providers', provider.id ]\\\">{{ provider.name }}</a></td>\\n            <td class=\\\"border-0\\\">\\n              <span class=\\\"float-right\\\">\\n                <button class=\\\"btn btn-warning mb-1 btn-sm\\\">\\n                  Atualizar\\n                </button>\\n\\n                <button class=\\\"btn btn-danger mb-1 btn-sm\\\">\\n                  Remover\\n                </button>\\n              </span>\\n            </td>\\n          </tr>\\n        </tbody>\\n      </table>\\n    </div>\\n    <ng-template #loading>\\n      <app-loading></app-loading>\\n    </ng-template>\\n\\n    <ng-template #loadingError>\\n      <div *ngIf=\\\"error$ | async; else loading\\\" class=\\\"card mt-3 border-0\\\">\\n        <app-server-error></app-server-error>\\n      </div>\\n    </ng-template>\\n  </div>\\n</div>\"","import { Component, OnInit } from '@angular/core';\nimport { Provider } from 'src/app/models/provider.model';\nimport { Observable, Subject, EMPTY } from 'rxjs';\nimport { ProvidersService } from 'src/app/services/providers.service';\nimport { catchError } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  preserveWhitespaces: true\n})\nexport class ListComponent implements OnInit {\n\n  splash = true;\n  providers$: Observable<Provider[]>;\n  error$ = new Subject<boolean>();\n\n  constructor(private service: ProvidersService) { }\n\n  ngOnInit() {\n    this.onRefresh();\n  }\n\n  onRefresh() {\n    this.providers$ = this.service.listAll()\n      .pipe(\n        catchError(error => {\n          this.error$.next(true);\n          return EMPTY;\n        })\n      );\n  }\n\n  ionViewDidLoad() {\n    setTimeout(() => this.splash = false, 4000);\n  }\n\n}\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\nimport { ListComponent } from './list/list.component';\nimport { DetailComponent } from './detail/detail.component';\nimport { CreateComponent } from './create/create.component';\n\nconst routes: Routes = [\n  { path: '', component: ListComponent },\n  { path: 'novo', component: CreateComponent },\n  { path: ':id', component: DetailComponent }\n];\n\n@NgModule({\n  imports: [RouterModule.forChild(routes)],\n  exports: [RouterModule]\n})\nexport class ProvidersRoutingModule { }\n","import { NgModule } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n\nimport { ProvidersRoutingModule } from './providers-routing.module';\nimport { ListComponent } from './list/list.component';\nimport { DetailComponent } from './detail/detail.component';\nimport { CreateComponent } from './create/create.component';\nimport { FormsModule } from '@angular/forms';\nimport { LayoutModule } from '../layout/layout.module';\nimport { ParamErrorComponent } from '../layout/param-error/param-error.component';\nimport { ServerErrorComponent } from '../layout/server-error/server-error.component';\n\n@NgModule({\n  declarations: [ListComponent, DetailComponent, CreateComponent],\n  entryComponents: [\n    ListComponent,\n    DetailComponent,\n    CreateComponent,\n    ParamErrorComponent,\n    ServerErrorComponent\n  ],\n  imports: [\n    CommonModule,\n    ProvidersRoutingModule,\n    FormsModule,\n    LayoutModule\n  ]\n})\nexport class ProvidersModule { }\n","import { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { environment } from 'src/environments/environment';\nimport { Provider } from '../models/provider.model';\nimport { map } from 'rxjs/operators';\nimport { Router } from '@angular/router';\n\n@Injectable({\n    providedIn: 'root'\n})\nexport class ProvidersService {\n\n    private readonly RESOURCE = `${environment.API}/providers`;\n\n    constructor(private http: HttpClient, private router: Router) { }\n\n    listAll() {\n        return this.http.get<Provider[]>(this.RESOURCE);\n    }\n\n    listOne(id: number) {\n        return this.http.get<Provider>(this.RESOURCE + '/' + id);\n    }\n\n    create(name: string, cnpj: string) {\n        return this.http.post<Provider>(this.RESOURCE + '/', { name, cnpj }).pipe(\n            map(success => {\n                if (success) {\n                    this.router.navigate(['/providers']);\n                }\n            })\n        );\n    }\n}\n"],"sourceRoot":""}